#!/bin/bash

# Fonction pause intéractive 
function pause() {
read -p ""
}


#Directories
SoftwareName="ARDentaire"
MergeAllPDF="$SoftwareName"
StampPDF="$SoftwareName/StampedPDF"

ARDdir="$HOME"/".ardentaire"
ARDdirTMP="/tmp/ARDentaire"
MergeAllPDFdir="$ARDdirTMP/mergeallpdf"
StampPDFdir="$ARDdirTMP/stamppdf"
pdgdir="$ARDdir/pdg"
pdgfile="PDG.pdf"

# IN CASE OF

mkdir -p "$MergeAllPDFdir"
mkdir -p "$StampPDFdir"
mkdir -p "$pdgdir"
convert xc:none -page A4 "$pdgdir/blank.pdf"
blankpage="$pdgdir/blank.pdf"


# ARD : CONF
## définition de $BASEDIR
. "$ARDdir/ardentaire.conf" # BASEDIR
cd "$BASEDIR"



fn_mergeallpdf () { ####################################################################
mkdir -p "$pdgdir"
echo -e "\n\n
---------------------------------
------  Adding Blank Pages  -----
---------------------------------\n"
for eachdir in `ls -d */`; do
cd "$eachdir"
mergeallpdf
cd "$BASEDIR"
done
}



fn_pdg () { #############################################################################################
echo -e "\n\n
---------------------------------
------  Making First Pages  -----
---------------------------------\n"
#STEP 1 : mettre $pdgfile de coté, créer une copie qui servira à travailler.
mkdir -p "$pdgdir"
cp "$pdgfile" "$pdgdir/$pdgfile"
cp "$pdgdir/$pdgfile" "$pdgdir/pdgtemp.pdf"
#STEP 1b : on rend pair le nombre de page de pdgtemp.pdf
convert xc:none -page A4 "$pdgdir/blank.pdf"
blankpage="$pdgdir/blank.pdf"

  numberofpages=`pdftk "$pdgdir/pdgtemp.pdf" dump_data | sed -e '/NumberOfPages/!d;s/NumberOfPages: //'`
  uneven=$(($numberofpages % 2))
  if [ $uneven == 1 ]
  then
    pdftk "$pdgdir/pdgtemp.pdf" "$blankpage" cat output "$pdgdir/pdgtemppair.pdf"
    mv "$pdgdir/pdgtemppair.pdf" "$pdgdir/pdgtemp.pdf"
  else echo
  fi



#STEP 2 : extraction de la première page pour la Stamp. Utilisation de PDFTK et de WKHTMLTOPDF
# On découpe ainsi le fichier pdg en deux : d'une part la page 1, d'autre part le reste
pdftk "$pdgdir/pdgtemp.pdf" cat 1 output "$pdgdir/pdgtemp1.pdf" #Extraction page 1
pdftk "$pdgdir/pdgtemp.pdf" cat 2-END output "$pdgdir/pdgtemp2.pdf" #Extraction du reste
rm -f "$pdgdir/pdgtemp.pdf" #il ne nous sert plus à rien, on le reconstituera

#### 3. stamper première page de chaque nom de dossier, et copier cette page dans le dossier sous le nom "00000000_pdg.pdf"

for eachdir in `ls -d */`; do
cd "$eachdir"
namearticle=${PWD##*/} #L'Article aura le nom du répertoire courant
pdgfinal="000000000_pdg_$namearticle.pdf"
	    echo -e "\nCréation de la page de garde pour le répertoire $eachdir"
	echo -e "<html><br/><br/><center><h1 style=\"font-size:40px\">"$namearticle"</h1><center></html>" > "$pdgdir"/stamp.html
	wkhtmltopdf "$pdgdir"/stamp.html "$pdgdir"/stampblank.pdf
	convert "$pdgdir"/stampblank.pdf -transparent white "$pdgdir"/stamp.pdf
	pdftk "$pdgdir"/"pdgtemp1.pdf" stamp "$pdgdir"/stamp.pdf output "$pdgdir"/$pdgfinal dont_ask
	pdftk "$pdgdir"/"$pdgfinal" "$pdgdir"/"pdgtemp2.pdf" cat output "$pdgfinal" dont_ask
	rm -f "$pdgdir/stamp*"
cd "$BASEDIR"
done

rm -r "$pdgdir"

echo -e "\nDone !"
}

fn_stamplist() {
echo -e "\n\n
-------------------------------------
-----  Stamping Names on files  -----
-------------------------------------\n"
mkdir -p "$pdgdir"
mkdir -p "$StampPDFdir/files"

for eachdir in `ls -d */`; do
cd "$eachdir"
namefichier=${PWD##*/} #Le Fichier aura le nom du répertoire courant
fichierfinal="$namefichier.pdf"


  if [ -f $stamplist ] && [ -s $fichier ]; then ## PAS DE RETOUR CONSOLE // pas essayé OR
  ## file exists

	# mkdir -p "$StampPDF"
	###### STAMPING FIRST PAGE ########

	# Boucle While
	###############
	while read name ; do
		name=$name
		rm -f "$StampPDFdir"/"stamp"*
		######## STAMPING NAMES ####################
		echo -e "Loading $namefichier directory...."
		echo -e "Stamping PDF file for $name-$namefichier.pdf"
		echo -e "<html><h4>"$name-$namefichier"</h4></html>" > "$StampPDFdir"/stamp.html
		wkhtmltopdf "$StampPDFdir"/stamp.html "$StampPDFdir"/stampblank.pdf
		convert "$StampPDFdir"/stampblank.pdf -transparent white "$StampPDFdir"/stamp.pdf
		pdftk "$MergeAllPDF"/"$namefichier".pdf stamp "$StampPDFdir"/stamp.pdf output "$StampPDFdir/files"/"$name"-"$namefichier".pdf dont_ask
		echo ""
	done < "$stamplist"

  else # file doesnt exist / is empty
	echo -e "Il n'y a pas d'impression prévu pour $namefichier (pas de fichier $stamplist)."
  fi

cd "$BASEDIR"
done

echo -e "Compiling final PDF Ready2Print ..."
CURRENTDATETIME=`date +'%y%m%d-%H%M%S'`
PolyToPrint="PolyToPrint-$CURRENTDATETIME.pdf"
pdftk "$StampPDFdir"/files/*.pdf output "$PolyToPrint" dont_ask
echo -e "Done !\n"
echo -e "==> Removing temporary files..."
rm "$StampPDFdir"/ -r
echo -e "\n\n      >> Done ! <<\n\n"
}




countpages() {
echo -e "\n\n
-------------------------------------
------  Count of page per file  -----
-------------------------------------\n"
echo -e > "$BASEDIR/data" "Promotion|Nb pages"
for eachdir in `ls -d */`; do
eachdir=${eachdir%%/}
numberofpages=`pdftk "$eachdir/ARDentaire/MergeAllPDF/$eachdir.pdf" dump_data | sed -e '/NumberOfPages/!d;s/NumberOfPages: //'`
echo -e >> "$BASEDIR/data" "$eachdir|$numberofpages|$price"
done
cat "$BASEDIR/data" | column -e -t -s "|"
rm "$BASEDIR/data"
pause
}

fn_help() {
b=$(tput bold)
n=$(tput sgr0)
echo -e "\n  ${b}$(basename $0) [OPTIONS]${n}
  --------------------------------------------------------------------------

    NE LANCEZ PAS LA CONFIGURATION SANS RTFM (--mkconfig)

    Si ce menu s'affiche, c'est que vous avez tapé un argument invalide.
    Vous êtes alors redirigé sur ce menu, sans exécuter les autres options
    que vous pourriez avoir entrée.

    Vous pouvez taper autant d'arguments que vous le souhaitez parmi les
    suivant :

	${b}[OPTIONS]${n}
	  ${b}--pdg${n}
		permet de créer, dans chaque dossier une page de garde.
		Vous devez avoir votre dossier ardentaire.conf configuré.
		Vous devez également avoir dans votre dossier un fichier
		nommé ${b}PDG.pdf${n} qui servira de page de garde de chaque
		polycopié résultant de l'assemblage par --mergeallpdf.

	  ${b}--mergeallpdf${n}
		utilise le script ${b}mergeallpdf${n} afin de fusionner tous
		les PDFs présents dans chaque dossier, après avoir rendu le
		nombre de pages de chaque fichier .pdf pair (afin que deux
		PDFs ne soient pas assemblés en rectoverso).
		Tapez ${b}mergeallpdf --help${n} pour plus d'informations sur cet
		outil.

	  ${b}--stamplist${n}
		permet d'assembler et d'imprimer différentes versions du même PDF
		assemblé ; autant de versions différentes de ce PDF seront créés
		et personnalisées selon ce qui est écrit sur chaque ligne du
		fichier ${b}StampList${n} + le nom du dossier.
		Ce fichier ${b}StampList${n} doit être créé dans chaque dossier
		qui seront sanctionnés par cette personnalisation.

	  ${b}-f [file]${n}
		CET ARGUMENT DOIT ÊTRE UTILISÉ EN DERNIER ARGUMENT UNIQUEMENT
		permet de définir un nom autre que \"StampList\" pour l'étape
		\`--stamplist\`.
			Exemple : $ \`$(basename $0) -as -f \"S37\"
			Réalise les trois étapes précédentes mais le fichier
			StampList sera nommé \"S37 \" et non pas \"StampList\".

	  ${b}--allsteps, -as${n}
		permet de réaliser successivement les trois étapes précédentes, à
		la suite. Cela revient donc à réaliser :
			${b}$(basename $0)${n} --pdg --mergeallpdf --stamplist

	  ${b}--countpages, -cp${n}
		permet de compter le nombre total de page de chaque assemblage de
		PDFs dans les différents dossiers.
		Il présuppose que vous avez réalisé : ${b}mergeallpdf --allsteps${n}

	  ${b}--mkconfig${n}
		permet de configurer \$BASEDIR dans le fichier de configuration
		~/.ardentaire/ardentaire.conf
		Vous devez donc lancer cette commande avant de pouvoir utiliser
		le script. Pour cela, dirigez-vous (cd) vers le dossier \$BASEDIR
		ou ouvrez le terminal dans ce dossier avant d'exécuter cette
		commande.

	  ${b}--noob${n}
		lance une interface intermédiaire afin de sélectionner les actions
		du programme (plutôt que de fournir des arguments).
		L'usage de cet argument

	  ${b}--help, -h${n}
		comme quand on se plante de commande, permet d'afficher l'aide.
"
exit 0
}


fn_noob() {
echo -e "
----------------------------------------------------
	Bienvenue dans le programme de l'ARD
----------------------------------------------------


	Que voulez-vous faire ?
	\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"

	1. Réaliser les pages de garde
	2. Réaliser les fichiers modèles
	3. Stamp PDF selon la StampList

	A. Réaliser l'étape 1 et 2
	B. Réaliser les trois étapes

	P. Compter les pages de chaque modèle

	Q. Quitter le programme.
	
Votre choix :
"

local choixmenu
read -n 1 choixmenu
case $choixmenu in
	1)   ardentaire --pdg && fn_noob ;;
	2)   ardentaire --mergeallpdf && fn_noob ;;
	3)   ardentaire --stamplist && fn_noob ;;
	A|a) ardentaire --pdg --mergeallpdf && fn_noob ;;
	B|b) ardentaire --as && fn_noob ;;
	P|p) ardentaire --cp && fn_noob ;;
	Q|q) exit 0 ;;
esac

}

fn_init() {
mkcountpages=0
mkpdg=0
mkmergeallpdf=0
mkstamplist=0
mkcfg=0
iamnoob=0
stamplist="StampList"
}

fn_init

if [ -z $1 ] ; then fn_help ; fi # si aucun argument est entré, display help | = *


while [[ $# -gt 0 ]]; do
    case "$1" in
    --countpages|-cp) 
	mkcountpages=1
        ;;
    --allsteps|-as)
	mkpdg=1
	mkmergeallpdf=1
	mkstamplist=1
        ;;
    --pdg)
	mkpdg=1
	;;
    --mergeallpdf)
    	mkmergeallpdf=1
	;;
    --stamplist)
    	mkstamplist=1
	;;
    --mkconfig)
	mkcfg=1
	;;
    -f)
	if [ -n $2 ] ; then
	stamplist="$2"
	shift
	fi
    --noob)
	iamnoob=1
    *)
	displayhelp=1
	;;
    esac
    shift
done


if [ $iamnoob = 1 ] ; then fn_noob ; fi
if [ $displayhelp = 1 ] ; then fn_help ; fi
if [ $mkcfg = 1 ] ; then mkdir -p "$ARDdir" && echo -e "BASEDIR=$PWD" > "$ARDdir/ardentaire.conf" && . "$ARDdir/ardentaire.conf" ; fi
if [ $mkpdg = 1 ] ; then fn_pdg ; fi
if [ $mkmergeallpdf = 1 ] ; then fn_mergeallpdf ; fi
if [ $mkstamplist = 1 ] ; then fn_stamplist ; fi
if [ $mkcountpages = 1 ] ; then fn_mkcountpages ; fi

TIMEEND=$(date +'%r')
echo -e "	Start : $TIMESTART"
echo -e "	End   : $TIMEEND\n\n"

exit 0
